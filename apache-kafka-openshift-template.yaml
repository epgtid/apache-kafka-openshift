    ##comienzo Template
  apiVersion: v1
  kind: Template
  metadata:
    name: kafka-zookeeper-openshift-mvilche
    labels:
      template: kafka-zookeeper-openshift-mvilche
      autor: "Martin_Fabrizzio_Vilche"
    annotations:
      openshift.io/display-name: "kafka-zookeeper-openshift-mvilche"
      iconClass: "icon-github"
      description: >-
        APACHE KAFKA + ZOOKEEPER
        Martin Fabrizzio Vilche.
        https://github.com/mvilche.

  objects:


############################## ZOOKEPEER


  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: zk-config
    data:
      ensemble: "zk-0;zk-1;zk-2"
      jvm.heap: "512M"
      tick: "2000"
      init: "10"
      sync: "5"
      client.cnxns: "60"
      snap.retain: "3"
      purge.interval: "1"

  - apiVersion: v1
    kind: Service
    metadata:
      name: zk-headless
      labels:
        app: zk-headless
    spec:
      ports:
      - port: 2888
        name: server
      - port: 3888
        name: leader-election
      clusterIP: None
      selector:
        app: zk


  - apiVersion: apps/v1beta1
    kind: StatefulSet
    metadata:
      name: zk
    spec:
      serviceName: zk-headless
      replicas: 3
      template:
        metadata:
          labels:
            app: zk
          annotations:
            pod.alpha.kubernetes.io/initialized: "true"
        spec:
          containers:
          - name: k8szk
            imagePullPolicy: Always
            image: zookeeper:latest
            ports:
            - containerPort: 2181
              name: client
            - containerPort: 2888
              name: server
            - containerPort: 3888
              name: leader-election
            env:
            - name : ZK_ENSEMBLE
              valueFrom:
                configMapKeyRef:
                  name: zk-config
                  key: ensemble
            - name : ZK_HEAP_SIZE
              valueFrom:
                configMapKeyRef:
                    name: zk-config
                    key: jvm.heap
            - name : ZK_TICK_TIME
              valueFrom:
                configMapKeyRef:
                    name: zk-config
                    key: tick
            - name : ZK_INIT_LIMIT
              valueFrom:
                configMapKeyRef:
                    name: zk-config
                    key: init
            - name : ZK_SYNC_LIMIT
              valueFrom:
                configMapKeyRef:
                    name: zk-config
                    key: tick
            - name : ZK_MAX_CLIENT_CNXNS
              valueFrom:
                configMapKeyRef:
                    name: zk-config
                    key: client.cnxns
            - name: ZK_SNAP_RETAIN_COUNT
              valueFrom:
                configMapKeyRef:
                    name: zk-config
                    key: snap.retain
            - name: ZK_PURGE_INTERVAL
              valueFrom:
                configMapKeyRef:
                    name: zk-config
                    key: purge.interval
            - name: ZK_CLIENT_PORT
              value: "2181"
            - name: ZK_SERVER_PORT
              value: "2888"
            - name: ZK_ELECTION_PORT
              value: "3888"
            command:
            - sh
            - -c
            - zkGenConfig.sh && zkServer.sh start-foreground
            readinessProbe:
              exec:
                command:
                - "zkOk.sh"
              initialDelaySeconds: 15
              timeoutSeconds: 5
            livenessProbe:
              exec:
                command:
                - "zkOk.sh"
              initialDelaySeconds: 15
              timeoutSeconds: 5
            volumeMounts:
            - name: datadir
              mountPath: /var/lib/zookeeper
      volumeClaimTemplates:
      - metadata:
          name: datadir
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 2Gi


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: zookeeper
      name: zookeeper
    spec: {}


  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: zookeeper
        build: zookeeper
      name: zookeeper
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'zookeeper:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: pusher
        git:
          ref: master
          uri: 'https://github.com/mvilche/apache-kafka-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange


##############################